version: '3'

networks:
  5broker:
    driver: bridge
    name: 5broker

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    networks:
    - 5broker
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
      EXTRA_ARGS: -javaagent:/demo-cluster/configs/jmx-exporter/jmx_prometheus_javaagent-0.19.0.jar=8081:/demo-cluster/configs/jmx-exporter/zookeeper.yml
      KAFKA_HEAP_OPTS: '-Xmx512M -Xms512M'
    volumes:
      - ./demo-cluster/configs/jmx-exporter:/demo-cluster/configs/jmx-exporter

  kafka1:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka1
    networks:
    - 5broker
    ports:
      - '9091:9091'
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:9091,INTERNAL://kafka1:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'true'
      KAFKA_OPTS: -javaagent:/demo-cluster/configs/jmx-exporter/jmx_prometheus_javaagent-0.19.0.jar=8081:/demo-cluster/configs/jmx-exporter/kafka.yml
      KAFKA_HEAP_OPTS: '-Xmx512M -Xms512M'
    volumes:
      - ./demo-cluster/configs/jmx-exporter:/demo-cluster/configs/jmx-exporter

  kafka2:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka2
    networks:
    - 5broker
    ports:
      - '8098:8098'
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:8098,INTERNAL://kafka2:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'true'
      KAFKA_OPTS: -javaagent:/demo-cluster/configs/jmx-exporter/jmx_prometheus_javaagent-0.19.0.jar=8081:/demo-cluster/configs/jmx-exporter/kafka.yml
      KAFKA_HEAP_OPTS: '-Xmx512M -Xms512M'
    volumes:
      - ./demo-cluster/configs/jmx-exporter:/demo-cluster/configs/jmx-exporter

  kafka3:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka3
    networks:
    - 5broker
    ports:
      - '8099:8099'
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:8099,INTERNAL://kafka3:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'true'
      KAFKA_OPTS: -javaagent:/demo-cluster/configs/jmx-exporter/jmx_prometheus_javaagent-0.19.0.jar=8081:/demo-cluster/configs/jmx-exporter/kafka.yml
      KAFKA_HEAP_OPTS: '-Xmx512M -Xms512M'
    volumes:
      - ./demo-cluster/configs/jmx-exporter:/demo-cluster/configs/jmx-exporter

  kafka4:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka4
    networks:
    - 5broker
    ports:
      - '8999:8999'
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 4
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:8999,INTERNAL://kafka4:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'true'
      KAFKA_OPTS: -javaagent:/demo-cluster/configs/jmx-exporter/jmx_prometheus_javaagent-0.19.0.jar=8081:/demo-cluster/configs/jmx-exporter/kafka.yml
      KAFKA_HEAP_OPTS: '-Xmx512M -Xms512M'
    volumes:
      - ./demo-cluster/configs/jmx-exporter:/demo-cluster/configs/jmx-exporter

  kafka5:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka5
    networks:
    - 5broker
    ports:
      - '9999:9999'
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 5
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:9999,INTERNAL://kafka5:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'true'
      KAFKA_OPTS: -javaagent:/demo-cluster/configs/jmx-exporter/jmx_prometheus_javaagent-0.19.0.jar=8081:/demo-cluster/configs/jmx-exporter/kafka.yml
      KAFKA_HEAP_OPTS: '-Xmx512M -Xms512M'
    volumes:
      - ./demo-cluster/configs/jmx-exporter:/demo-cluster/configs/jmx-exporter

  # grafana:
  #   image: 'grafana/grafana:9.5.2'
  #   container_name: grafana
  #   networks:
  #   - 5-broker
  #   ports:
  #     - '3000:3000'
  #   environment:
  #     GF_PATHS_DATA: /var/lib/grafana
  #     GF_SECURITY_ADMIN_PASSWORD: kafka
  #     GF_SECURITY_ALLOW_EMBEDDING: true
  #     CORS_ALLOW_ORIGIN: '*'
  #     GF_AUTH_ANONYMOUS_ENABLED: true
  #     GF_AUTH_ANONYMOUS_ORG_ROLE: Viewer
  #   volumes:
  #     - ./demo-cluster/configs/grafana/provisioning:/etc/grafana/provisioning
  #     - ./demo-cluster/configs/grafana/dashboards:/var/lib/grafana/dashboards
  #   depends_on:
  #     - prometheus

  # prometheus:
  #   image: 'prom/prometheus:v2.44.0'
  #   container_name: prometheus
  #   ports:
  #     - '9090:9090'
  #   volumes:
  #     - ./demo-cluster/configs/prometheus/prometheus5.yml:/etc/prometheus/prometheus5.yml
  #   command: '--config.file=/etc/prometheus/prometheus5.yml'

    # Use kafkasonar-dev to run FE only
    # Use kafkasonar-dev-server to run FE and BE

  # kafkasonar-dev-server:
  #   image: upasana90daniel98/kafkasonar-dev-server
  #   container_name: kafkasonar-dev-server
  #   ports:
  #     - '5175:5175'
  #   working_dir: /usr/src/app
  #   volumes:
  #     - ./:/usr/src/app
  #     - node_modules:/usr/src/app/node_modules
  #   command: npm run dev

  # kafkasonar-dev:
  #   image: upasana90daniel98/kafkasonar-dev
  #   container_name: kafkasonar-dev
  #   ports:
  #     - '5175:5175'
  #   working_dir: /usr/src/app/
  #   volumes:
  #     - ./:/usr/src/app
  #     - node_modules:/usr/src/app/node_modules
  #   command: npm run frontend

  # kafkasonar-dev-server:
  #   # image: firenaysh/kafkasonar-dev-server
  #   image: upasana90daniel98/kafkasonar-dev-server
  #   container_name: kafkasonar-dev-server
  #   ports:
  #     - '5175:5175'
  #   working_dir: /usr/src/app
  #   volumes:
  #     - ./ui/:/usr/src/app
  #     - node_modules:/usr/src/app/node_modules
  #   command: npm run frontend

  # References: https://mtlynch.io/painless-web-app-testing/#creating-an-end-to-end-test, https://www.cypress.io/blog/2019/05/02/run-cypress-with-a-single-docker-command/
  # cypress:
  #   image: cypress/included:latest
  #   container_name: cypress
  #   depends_on:
  #     # - kafkasonar-dev
  #     - kafkasonar-dev-server
  #   environment:
  #     # - CYPRESS_baseUrl=http://localhost:5175/ # Cypress cannot find / work with this URL.
  #     # - CYPRESS_baseUrl=http://kafkasonar-dev:5175/
  #     - CYPRESS_baseUrl=http://kafkasonar-dev-server:5175/
  #   working_dir: /usr/src/app/cypress
  #   volumes:
  #     - ./:/usr/src/app/cypress
  # Above is enough to run Cypress in headless mode.
  # Can use command "docker compose -f docker-compose-cluster.yml up --exit-code-from cypress" so the exit code tells you if the tests passed (0) or failed (1 or other non-0 number).

# volumes:
#   node_modules:
